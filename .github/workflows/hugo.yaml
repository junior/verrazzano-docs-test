# Copyright (c) 2023 Oracle and/or its affiliates.
name: Deploy Verrazzano Docs (using Hugo) to Pages

on:
  # Runs on pushes targeting master and release-*
  push:
    branches:
      - main
      - release-*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.111.3
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass Embedded
        run: sudo snap install dart-sass-embedded
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Info
        run: |
          echo ">> 2 <<<"
          echo ">> github.ref >>> ${{ github.ref }} <<<"
          echo ">> github.base_ref >>> ${{ github.base_ref }} <<<"
          echo ">> github.head_ref >>> ${{ github.head_ref }} <<<"
          echo ">> github.ref_name >>> ${{ github.ref_name }} <<<"
          echo ">> steps.pages.outputs.base_url >>> ${{ steps.pages.outputs.base_url }} <<<"
          echo ">> steps.pages.outputs.base_path >>> ${{ steps.pages.outputs.base_path }} <<<"
      - name: Build production documentation
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --environment production \
            --destination public/latest
      # - name: Build Redirects
      #   run: |
      #     LATEST="latest"
      #     INDEX_FILE="_index"

      #     function fprint_index() {
      #       local url="$1"
      #       local file="$2"
      #       echo "<!DOCTYPE html>
      #     <html>
      #       <head>
      #         <title>$url</title>
      #         <link rel='canonical' href='$url'/>
      #         <meta name='robots' content='noindex'>
      #         <meta http-equiv='content-type' content='text/html; charset=utf-8'/>
      #         <meta http-equiv='refresh' content='0; url=$url'/>
      #       </head>
      #     </html>" > "$2"
      #     }

      #     function redirect_file() {
      #       local newPath="$1"
      #       local url="${{ steps.pages.outputs.base_path }}/$LATEST/$newPath"

      #       echo "creating redirect for $newPath"

      #       mkdir -p "../../$newPath"

      #       fprint_index "$url" "../../$newPath/index.html"
      #     }

      #     fprint_index "${{ steps.pages.outputs.base_path }}/$LATEST" "index.html"

      #     rm -rf docs
      #     cd content/en

      #     mdFiles=$(find docs -name "*.md")
      #     for file in $mdFiles; do
      #       name=$(basename "$file" .md)
      #       path=$(dirname "$file" | awk '{print tolower($0)}')

      #       if [[ "$name" == "$INDEX_FILE" ]]; then
      #         redirect_file "$path"
      #       else
      #         name="$(echo "$name"| awk '{print tolower($0)}')"
      #         redirect_file "$path/$name"
      #       fi
      #     done
      # - name: Create folders (temp-test)
      #   run: |
      #     cp -r public/latest public/archive
      #     cp -r public/latest public/devel
      #     cp -r public/latest public/v1.5
      #     cp -r docs public/docs
      #     cp index.html public/index.html
      # - name: Upload production artifact
      #   uses: actions/upload-pages-artifact@v1
      #   with:
      #     path: ./public

  Create_Redirects:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Build Redirects
        run: |
          LATEST="latest"
          INDEX_FILE="_index"

          function fprint_index() {
            local url="$1"
            local file="$2"
            echo "<!DOCTYPE html>
          <html>
            <head>
              <title>$url</title>
              <link rel='canonical' href='$url'/>
              <meta name='robots' content='noindex'>
              <meta http-equiv='content-type' content='text/html; charset=utf-8'/>
              <meta http-equiv='refresh' content='0; url=$url'/>
            </head>
          </html>" > "$2"
          }

          function redirect_file() {
            local newPath="$1"
            local url="${{ steps.pages.outputs.base_path }}/$LATEST/$newPath"

            echo "creating redirect for $newPath"

            mkdir -p "../../$newPath"

            fprint_index "$url" "../../$newPath/index.html"
          }

          fprint_index "${{ steps.pages.outputs.base_path }}/$LATEST" "index.html"

          rm -rf docs
          cd content/en

          mdFiles=$(find docs -name "*.md")
          for file in $mdFiles; do
            name=$(basename "$file" .md)
            path=$(dirname "$file" | awk '{print tolower($0)}')

            if [[ "$name" == "$INDEX_FILE" ]]; then
              redirect_file "$path"
            else
              name="$(echo "$name"| awk '{print tolower($0)}')"
              redirect_file "$path/$name"
            fi
          done

  Prepare_Artifacts:
    runs-on: ubuntu-latest
    needs: Create_Redirects
    steps:
      - name: Create folders (temp-test)
        run: |
          cp -r public/latest public/archive
          cp -r public/latest public/devel
          cp -r public/latest public/v1.5
          cp -r docs public/docs
          cp index.html public/index.html
      - name: Upload production artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: Prepare_Artifacts
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
